name: Deploy Helm Chart

on:
  push:
    paths:
      - 'cats-dogs/**'
    branches:
      - main
  workflow_dispatch:

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    env:
      HELM_RELEASE_NAME: cats-dogs
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Lint Helm Chart
        run: |
          helm lint cats-dogs/

      - name: Package Helm Chart
        run: |
          helm package cats-dogs/

      - name: Setup SSH
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
          VM_HOST: ${{ secrets.VM_HOST }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          sshpass -e ssh-keyscan -H $VM_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Transfer Files
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          # Transfer chart
          sshpass -e scp -o StrictHostKeyChecking=no cats-dogs-*.tgz $VM_USER@$VM_HOST:~/cats-dogs/

      - name: Deploy
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          NODE_PORT: ${{ secrets.NODE_PORT }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST "
            cd ~/cats-dogs
            
            # Docker image check and build
            if ! docker images cats-dogs:v1 | grep -q cats-dogs; then
              echo 'Building Docker image...'
              docker build -t cats-dogs:v1 .
            else
              echo 'Docker image cats-dogs:v1 exists'
            fi
            
            # Clean up any failed deployments
            kubectl delete pod -l app.kubernetes.io/name=cats-dogs --force --grace-period=0 2>/dev/null || true
            
            # Helm deployment with updated values
            if helm list | grep -q '$HELM_RELEASE_NAME'; then
              echo 'Upgrading existing release...'
              helm upgrade $HELM_RELEASE_NAME cats-dogs-*.tgz \
                --set image.repository=cats-dogs \
                --set image.tag=v1 \
                --set service.type=NodePort \
                --set service.nodePort=$NODE_PORT \
                --set persistence.enabled=true \
                --set persistence.storageClass=standard \
                --set metrics.enabled=false \
                --set metrics.serviceMonitor.enabled=false \
                --set securityContext.readOnlyRootFilesystem=false \
                --set securityContext.runAsUser=1000 \
                --set securityContext.runAsGroup=1000 \
                --set securityContext.allowPrivilegeEscalation=false \
                --wait \
                --timeout 5m
            else
              echo 'Installing new release...'
              helm install $HELM_RELEASE_NAME cats-dogs-*.tgz \
                --set image.repository=cats-dogs \
                --set image.tag=v1 \
                --set service.type=NodePort \
                --set service.nodePort=$NODE_PORT \
                --set persistence.enabled=true \
                --set persistence.storageClass=standard \
                --set metrics.enabled=false \
                --set metrics.serviceMonitor.enabled=false \
                --set securityContext.readOnlyRootFilesystem=false \
                --set securityContext.runAsUser=1000 \
                --set securityContext.runAsGroup=1000 \
                --set securityContext.allowPrivilegeEscalation=false \
                --wait \
                --timeout 5m
            fi
          "

      - name: Verify Deployment
        if: always()
        env:
          SSHPASS: ${{ secrets.VM_PASSWORD }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          echo "Checking deployment status..."
          sshpass -e ssh -o StrictHostKeyChecking=no $VM_USER@$VM_HOST '
            echo "Pod Status:"
            kubectl get pods -l app.kubernetes.io/name=cats-dogs
            echo -e "\nPod Details:"
            kubectl describe pod -l app.kubernetes.io/name=cats-dogs
            echo -e "\nContainer Logs:"
            POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=cats-dogs -o jsonpath="{.items[0].metadata.name}")
            kubectl logs $POD_NAME || true
            echo -e "\nService Details:"
            kubectl get svc -l app.kubernetes.io/name=cats-dogs
            echo -e "\nPersistent Volume Claims:"
            kubectl get pvc -l app.kubernetes.io/name=cats-dogs
          '